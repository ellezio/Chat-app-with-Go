package components

import "github.com/ellezio/Chat-app-with-Go/internal/message"
import "github.com/ellezio/Chat-app-with-Go/internal/session"
import "time"
import "slices"

templ MessageBox(msg message.Message, oob bool, edit bool) {
	{{ AuthorName := session.GetUsername(ctx) }}
	{{ isAuthor := msg.Author == AuthorName }}
	{{ isHidden := slices.Contains(msg.HiddenFor, AuthorName) }}
	<li
		if oob {
			hx-swap-oob="true"
		}
		id={ "msg-id-" + msg.ID.Hex() }
		class={
			"mt-4 max-w-full flex flex-col",
			templ.KV("self-end items-end", isAuthor),
			templ.KV("self-start items-start", !isAuthor),
		}
	>
		<div class="flex">
			<div
				id={ "ctx-menu-invoker-" + msg.ID.Hex() }
				data-msg-id={ msg.ID.Hex() }
				onclick="toggleContextMenu(event)"
				class="px-2 cursor-pointer h-fit"
			>:</div>
			<div
				class={
					"w-fit border-2 bg-slate-400",
					templ.KV("border-green-500", isAuthor),
					templ.KV("border-yellow-500", !isAuthor),
				}
			>
				if msg.Deleted {
					Deleted message
				} else if isHidden {
					Hidden message
				} else if msg.Type == message.ImageMessage {
					<img src={ "/files/" + msg.Content } class="w-auto h-auto max-w-full max-h-96"/>
				} else if edit {
					<form
						hx-post="/message/edit"
						hx-target={ "#msg-id-" + msg.ID.Hex() }
						hx-vals={ "{\"msg-id\": \"" + msg.ID.Hex() + "\"}" }
					>
						<textarea name="msg-content">{ msg.Content }</textarea>
						<button type="button" hx-get="/message">Cancel</button>
						<button type="submit">Update</button>
					</form>
				} else {
					{ msg.Content }
				}
			</div>
		</div>
		<div>{ msg.Author } | { msg.CreatedAt.Format(time.DateTime) }</div>
		if isAuthor {
			<div>status: { msg.Status }</div>
		}
	</li>
}

templ MessagesList(msgs []message.Message, oob bool) {
	<ul
		id="msgs-list"
		if oob {
			hx-swap-oob="beforeend"
		} else {
			class="grow list-none p-0 flex flex-col justify-end"
		}
	>
		for _, msg := range msgs {
			@MessageBox(msg, false, false)
		}
	</ul>
}

templ SendBar() {
	<div class="flex gap-4">
		<input
			type="file"
			name="file"
			class="bg-alpha border-2 border-gamma rounded-sm"
			hx-post="/uploadfile"
			hx-encoding="multipart/form-data"
			hx-on::after-request="this.value = ''"
		/>
		<form ws-send hx-on::ws-after-send="this.reset()" class="flex gap-4 grow">
			<textarea name="msg" class="grow resize-none bg-alpha border-2 rounded-sm border-gamma"></textarea>
			<button type="submit" class="bg-alpha border-2 border-gamma rounded-sm">Send</button>
		</form>
	</div>
}

templ ChatWindow(msgs []message.Message) {
	<div class="flex flex-col w-full" hx-ext="ws" ws-connect="/chatroom">
		<div id="scroller" class="flex-1 p-2 overflow-y-auto">
			@MessagesList(msgs, false)
			<div id="anchor"></div>
		</div>
		@msgScroller()
		<div class="h-fit py-4 px-2 bg-beta">
			@SendBar()
		</div>
	</div>
}

templ Page(msgs []message.Message) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link href="/css/containers.css" rel="stylesheet"/>
			<link href="/css/chat.css" rel="stylesheet"/>
			<link href="/css/output.css" rel="stylesheet"/>
			<script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12/dist/ext/ws.js"></script>
			<title>Chat page</title>
		</head>
		<script>
			htmx.config.allowNestedOobSwaps=false;
		</script>
		<body class="bg-delta m-0 overflow-y-hidden h-screen">
			@ctxMenuScripts()
			@ContextMenusWrapper(false) {
				for _, msg := range msgs {
					@ContextMenu(msg, false)
				}
			}
			<div class="max-w-screen-md mx-auto bg-gamma h-full flex">
				@ChatWindow(msgs)
			</div>
			if !session.IsLoggedIn(ctx) {
				<div id="modal" class="flex justify-center items-center backdrop-blur-sm fixed left-0 top-0 w-screen h-screen">
					<div class="bg-cyber-gray border-2 border-neon-pink rounded-md p-4 w-fit h-fit">
						<form
							id="login-form"
							hx-post="/login"
							hx-swap="none"
						>
							<div>
								<label class="font-semibold text-neon-blue">name:</label>
								<input
									id="username"
									name="username"
									class="border-2 rounded-md border-slate-800 outline-none px-1 bg-slate-300"
									autocomplete="off"
								/>
								<div id="username-error-msg"></div>
							</div>
							<button type="submit" class="w-full animate-pulse-neon bg-slate-400 rounded-md content-center py-1 text-slate-700 font-bold mt-2">Login</button>
						</form>
					</div>
				</div>
			}
		</body>
	</html>
}

templ ContextMenusWrapper(oob bool) {
	<div
		id="ctxMenusWrapper"
		onclick="toggleContextMenu()"
		class="hidden absolute z-10 top-0 left-0 h-screen w-screen"
		if oob {
			hx-swap-oob="beforeend"
		}
	>
		{ children... }
	</div>
}

templ ContextMenu(msg message.Message, oob bool) {
	{{ AuthorName := session.GetUsername(ctx) }}
	{{ isAuthor := msg.Author == AuthorName }}
	{{ isHidden := slices.Contains(msg.HiddenFor, AuthorName) }}
	<ul
		id={ "ctx-menu-" + msg.ID.Hex() }
		data-msg-id={ msg.ID.Hex() }
		class="ctx-menu hidden relative bg-alpha w-fit"
		hx-vals={ "js:{'msg-id':'" + msg.ID.Hex() + "'}" }
		onclick="toggleContextMenu()"
		if oob {
			hx-swap-oob="true"
		}
	>
		if isAuthor && !isHidden && !msg.Deleted && msg.Type == message.TextMessage {
			<li hx-swap="none" hx-get="/message/edit" hx-trigger="click">edit</li>
		}
		if true {
			<li hx-swap="none" hx-post="/message/pin" hx-trigger="click">pin</li>
		}
		if isHidden {
			<li hx-swap="none" hx-post="/message/hide/false" hx-trigger="click">show</li>
		} else {
			<li hx-swap="none" hx-post="/message/hide/true" hx-trigger="click">hide</li>
		}
		if isAuthor && !msg.Deleted {
			<li hx-swap="none" hx-post="/message/delete" hx-trigger="click">delete</li>
		}
	</ul>
}

templ ErrorMsg(fieldId string, msg string) {
	<div
		hx-swap-oob="outerHTML"
		id={ fieldId + `-error-msg` }
		class="text-red-700 font-semibold mt-1"
	>{ msg }</div>
}

templ ctxMenuScripts() {
	<script>
		function handleSetPosition(elm, relativeTo) {
			const rect = relativeTo.getBoundingClientRect();

			elm.style.top = (rect.top || rect.y) + "px";
			elm.style.left = (rect.left || rect.x) + "px";
		}

		function toggleContextMenu(event) {
			const ctxMenusWrapper = document.getElementById("ctxMenusWrapper");

			const msgId = event?.target.getAttribute("data-msg-id");

			if (!msgId) {
				ctxMenusWrapper.classList.toggle("hidden", true);
				document.querySelectorAll(".ctx-menu:not(.hidden)")?.forEach((ctxMenu) => {
					ctxMenu.classList.toggle("hidden", true);
				});

				return;
			}

			const ctxMenu = document.getElementById(`ctx-menu-${msgId}`);

			ctxMenusWrapper.classList.toggle("hidden", false);
			ctxMenu.classList.toggle("hidden", false);

			handleSetPosition(ctxMenu, event.target);
		}

		window.addEventListener("resize", () => {
			const ctxMenu = document.querySelector(".ctx-menu:not(.hidden)");
			if (!ctxMenu) return;

			const msgId = ctxMenu.getAttribute("data-msg-id")
			const invokedFrom = document.getElementById("ctx-menu-invoker-" + msgId);

			handleSetPosition(ctxMenu, invokedFrom);
		});
	</script>
}

script msgScroller() {
	const elt = document.getElementById("scroller")
	const msgsList = document.getElementById("msgs-list")
	const sharedState = { 
		anchored: true,
		autoScroll: false,
	}

	elt.addEventListener("scroll", (evt) => {
		if (!sharedState.autoScroll) {
			sharedState.anchored = evt.target.scrollTop >= (evt.target.scrollHeight - evt.target.offsetHeight - 10)
		}
		sharedState.autoScroll = false
	})

	const observer = new ResizeObserver((entries) => {
		for (const entry of entries) {
			if (sharedState.anchored) {
				elt.scrollTop = elt.scrollHeight - elt.offsetHeight
				sharedState.autoScroll = true
			}
		}
	})

	observer.observe(msgsList)
}
